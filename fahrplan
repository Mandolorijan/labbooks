Aufgaben:

1. Datenbank:
    1.1 [fertig] mysql dump
    1.2 load into sqllite: https://github.com/dumblob/mysql2sqlite
    1.3 [fertig] check for known issues when upgrading django 1.11 -> django 3.0
        - wahrscheinlich alle urls.py anpassen
        - bei den imports uffbasse.
    1.4 Wie geht man mit den migrations um? kann man einfach die migrations ordner kopieren und darauf aufbauend die
        nächsten migrations schreiben? in der django DB sind durchgeführte migrations gespeichert!
        >> https://docs.djangoproject.com/en/3.0/howto/upgrade-version/

2. libraries:
    2.1 alle dateien nach importierten libs durchsuchen (die nicht in python inkludiert sind) und hier listen (zB: crons, chemlib)
        - chemlib: eigene implementierung. vielleicht durch "pip install molmass" ersetzen?
        - requiremtns.txt:
            ok      django==1.11.27
            ok      gunicorn
            noneed  periodictable für cheminventory
            noneed  suds
            ok      numpy
            ok      matplotlib
            ok      MySQL-python
            ok      scipy
            ok      Pillow
            ok      openpyxl
            ok      python-pptx
            fork    pyMTRX  -->>  see https://github.com/ampron/pyMTRX/pull/14
            ok      django-background-tasks
            ok      requests
            ok      h5py
            ok      djangorestframework
        - fitlib (nano-bio repo): huge propability to find not working things. found eg in cheminventory

    2.2 diese libs auf python 3 / django 3 support testen

3. experimente / apps:
    3.1 werden alle genutzt? ZB: Pulsetube? ja
    3.2 kann man was zusammenfassen? zb labinventory, poweralarm? ja

4. Dateien konvertieren:
    4.1 Jede Datei durchgehen, auf python 3 / django 3 support testen (zum Beispiel urls!)
        - urls: am besten auch alles urls benennen: path('asdf/', views.abc, name="abc"). dann mit "{% urls "abc" %} darauf zugreifen
        - bei jeder datei in die erste zeile schreiben, bis zu welchem commit (wahrscheinlich dem aktuellen) des alten labboks änderungen übernommen wurden

5. Testumgebung
    5.1 [fertig] neues django 3 Projekt aufsetzen
    5.2 [progress] requirements file
    5.3 README.md file
    5.4 nginx.conf Datei

6. Django Cleanup benutzen???



Vorschlag Reihenfolge:
1.3
2.1
2.2
1.4
3.1
3.2
1.1
1.2
4.1
5.2
5.3
5.4


Bottelnecks:

    - cheminventory. mit all seinem zeug (zB fitlib). start upgrade here


https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

cd /var/opt/
python3 -m venv venv-django3
source venv-django3/bin/activate
pip install --upgrade pip wheel setuptools
pip install --no-cache-dir --upgrade mysqlclient
pip install git+https://github.com/nano-bio/fitlib.git@package
pip install git+https://github.com/nano-bio/pyMTRX.git

cd labbooks-dj3 # uffbasse
python manage.py migrate --fake labinventory zero
python manage.py migrate --fake poweralarm zero

mysql -u labbooks_copy -plabbooks_copy < dropLabinventoryPoweralarm.sql # uffbasse x 2
python manage.py migrate
python manage.py runserver
